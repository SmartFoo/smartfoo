// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.41'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        /**
         * Updates:
         *  https://bintray.com/dcendents/gradle-plugins/com.github.dcendents%3Aandroid-maven-gradle-plugin
         */
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1' // last checked 2018/05/01
        /**
         * Updates:
         *  https://bintray.com/jfrog/jfrog-jars/gradle-bintray-plugin
         */
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0' // last checked 2018/05/01
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    //
    // Required to poll for new versions of dependencies on each build rather than every 24 hours (the default)
    //
    //noinspection GroovyAssignabilityCheck
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Checks for project.LOCAL_DEVELOPMENT_BUILD and uses local only projects
 *
 * @return true if project.LOCAL_DEVELOPMENT_BUILD == true, else false
 */
def getIsLocalDevelopmentBuild() {
    def isLocalDevelopmentBuild = project.hasProperty('LOCAL_DEVELOPMENT_BUILD') ? project.LOCAL_DEVELOPMENT_BUILD.toBoolean() : false
    println 'getIsLocalDevelopmentBuild: isLocalDevelopmentBuild=' + isLocalDevelopmentBuild
    return isLocalDevelopmentBuild
}

ext {
    getIsLocalDevelopmentBuild = this.&getIsLocalDevelopmentBuild
}

