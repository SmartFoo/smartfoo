
plugins {
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.kotlinAndroid)
}

archivesBaseName = 'smartfoo-android-lib-core'
description = 'SmartFoo Core Library for Android'
group = 'com.smartfoo'
version = '0.1.23'

def siteUrl = 'https://github.com/SmartFoo/smartfoo'
def gitUrl = 'https://github.com/SmartFoo/smartfoo.git'

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.google.android.material
    implementation libs.androidx.recyclerview
    implementation libs.androidx.coordinatorlayout
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.androidx.test.espresso.core
}

android {
    namespace 'com.smartfoo.android.core'
    compileSdk 33

    defaultConfig {
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false

            //
            // NOTE:(pv) Setting this to true can mess up debugging by hiding method parameters (especially anonymous methods)
            // If you are seeing weird missing variables when debugging, set this to false.
            // DO NOT CHECK THIS IN AS 'false'!
            //
            testCoverageEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig true
    }

    /*
    if (getIsLocalDevelopmentBuild()) {
        defaultPublishConfig 'debug'
    }
    */
}

/*
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives']

    publish = true

    pkg {
        repo = 'maven'
        name = archivesBaseName
        userOrg = 'smartfoo'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ['MIT']
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name description
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://raw.githubusercontent.com/SmartFoo/smartfoo/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id 'paulpv'
                        name 'Paul Peavyhouse'
                        email 'pv@swooby.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// Required to prevent "error: reference not found" for Android OS/API calls
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
*/
